package cy.studiodemo.base;import android.content.Context;import android.os.Bundle;import android.os.PersistableBundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.view.ViewGroup;import android.widget.LinearLayout;import android.widget.LinearLayout.LayoutParams;import com.lidroid.xutils.BitmapUtils;import com.lidroid.xutils.HttpUtils;import com.lidroid.xutils.exception.HttpException;import com.lidroid.xutils.http.HttpHandler;import com.lidroid.xutils.http.RequestParams;import com.lidroid.xutils.http.ResponseInfo;import com.lidroid.xutils.http.callback.RequestCallBack;import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;import org.apache.http.entity.StringEntity;import org.json.JSONObject;import java.io.UnsupportedEncodingException;import cy.studiodemo.R;import cy.studiodemo.engine.XUtilsManager;import cy.studiodemo.util.NetUtil;import cy.studiodemo.util.ToastUtil;public abstract class BaseActivity extends AppCompatActivity {    protected MyApplication mMyApplication;    protected Context mContext;    protected HttpUtils mHttpUtils;    protected BitmapUtils mBitmapUtils;    protected HttpHandler<String> mHandler;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_base_layout);        initParent();        findViews();        setListensers();    }    /**     * 防止Activity销毁时候，fragment调用getActivity==null     */    @Override    public void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {//        super.onSaveInstanceState(outState, outPersistentState);    }    private void initParent() {        mContext = this;        mMyApplication = (MyApplication) mContext.getApplicationContext();        initXUtils();        LinearLayout subCententView = (LinearLayout) this.findViewById(R.id.base_sub_activty_layout);        LayoutParams layoutParams = new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);        View centerView = View.inflate(mContext, setContentView(), null);        subCententView.addView(centerView, layoutParams);    }    private void initXUtils() {        XUtilsManager xUtilsManager = XUtilsManager.getInstance(mContext);        mHttpUtils = xUtilsManager.getHttpUtils();        mBitmapUtils = xUtilsManager.getBitmapUtils();    }    /**     * GET方式请求服务器     */    protected void initDataByGet(String url) {        initDataByGet(url, null);    }    /**     * POST方式请求服务器     */    protected void initDataByPost(String url, JSONObject jsonObject) {        initDataByPost(url, jsonObject, null);    }    /**     * GET方式请求服务器,避免用户点击多次按钮,造成重复加载     */    protected void initDataByGet(final String url, final View view) {        if (!NetUtil.isNetConnect(mContext)) {            ToastUtil.showToast(mContext, "请检查网络");            return;        }        mHandler = mHttpUtils.send(HttpMethod.GET, url, new RequestCallBack<String>() {            @Override            public void onStart() {                if (view != null) {                    view.setEnabled(false);                }                initDataOnStart(url);            }            @Override            public void onSuccess(ResponseInfo<String> responseInfo) {                try {                    if (view != null) {                        view.setEnabled(true);                    }                    String responseData = responseInfo.result;                    initDataOnSucess(responseData, url);                } catch (Exception e) {                    e.printStackTrace();                }            }            @Override            public void onFailure(HttpException error, String msg) {                if (view != null) {                    view.setEnabled(true);                }                ToastUtil.showToast(mContext, "获取服务器数据失败");                initDataOnFailure(url);            }        });    }    /**     * POST方式请求服务器,避免用户点击多次按钮,造成重复加载     */    protected void initDataByPost(final String url, JSONObject jsonObject, final View view) {        if (!NetUtil.isNetConnect(mContext)) {            ToastUtil.showToast(mContext, "请检查网络");            return;        }        StringEntity stringEntity = null;        try {            stringEntity = new StringEntity(jsonObject.toString(), "UTF-8");        } catch (UnsupportedEncodingException e1) {            e1.printStackTrace();        }        RequestParams params = new RequestParams();        params.setBodyEntity(stringEntity);        mHandler = mHttpUtils.send(HttpMethod.POST, url, params, new RequestCallBack<String>() {            @Override            public void onStart() {                if (view != null) {                    view.setEnabled(false);                }                initDataOnStart(url);            }            @Override            public void onSuccess(ResponseInfo<String> responseInfo) {                try {                    if (view != null) {                        view.setEnabled(true);                    }                    String responseData = responseInfo.result;                    initDataOnSucess(responseData, url);                } catch (Exception e) {                    e.printStackTrace();                }            }            @Override            public void onFailure(HttpException error, String msg) {                ToastUtil.showToast(mContext, "获取服务器数据失败");                if (view != null) {                    view.setEnabled(true);                }                initDataOnFailure(url);            }        });    }    /**     * 取消请求服务器     */    protected void cancelLoad() {        if (mHandler != null) {            mHandler.cancel();        }    }    /**     * 加载子类布局     */    protected abstract int setContentView();    /**     * 加载控件     */    protected abstract void findViews();    /**     * 设置监听     */    protected abstract void setListensers();    /**     * 请求网络之前     */    protected void initDataOnStart(String url) {    }    /**     * 请求网络成功     */    protected void initDataOnSucess(String result, String url) {    }    /**     * 请求网络失败     */    protected void initDataOnFailure(String url) {    }}