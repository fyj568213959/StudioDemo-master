package cy.studiodemo.base;import android.content.Context;import android.graphics.drawable.AnimationDrawable;import android.os.Bundle;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.ViewGroup.LayoutParams;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.lidroid.xutils.BitmapUtils;import com.lidroid.xutils.HttpUtils;import com.lidroid.xutils.exception.HttpException;import com.lidroid.xutils.http.HttpHandler;import com.lidroid.xutils.http.RequestParams;import com.lidroid.xutils.http.ResponseInfo;import com.lidroid.xutils.http.callback.RequestCallBack;import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;import cy.studiodemo.R;import cy.studiodemo.engine.XUtilsManager;import cy.studiodemo.util.NetUtil;import cy.studiodemo.util.ToastUtil;public abstract class BaseFragment extends Fragment {    protected MyApplication mMyApplication;    protected Context mContext;    protected RelativeLayout base_fragment_loading_layout;    protected ImageView base_fragment_iv_loading;    protected TextView base_fragment_tv_loading;    protected HttpUtils mHttpUtils;    protected BitmapUtils mBitmapUtils;    protected HttpHandler<String> mHandler;    protected LayoutInflater mInflater;    private View mRootView;    private boolean mIsShowAnim;    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        mContext = getActivity();        mMyApplication = (MyApplication) mContext.getApplicationContext();        initXUtils();    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        if (mRootView != null) {            ViewGroup parent = (ViewGroup) mRootView.getParent();            if (parent != null) {                parent.removeView(mRootView);            }            base_fragment_loading_layout.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View view) {                    mIsShowAnim = true;                    onClickBaseLoading();                }            });            mIsShowAnim = false;            return mRootView;        }        mIsShowAnim = true;        this.mInflater = inflater;        mRootView = initParent(container);        findViews(mRootView);        setListensers();        initVariable();        return mRootView;    }    @Override    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);    }    private View initParent(ViewGroup container) {        View rootView = mInflater.inflate(R.layout.fragment_base_layout, container, false);        LinearLayout subCententView = (LinearLayout) rootView.findViewById(R.id.base_sub_fragment_layout);        base_fragment_loading_layout = (RelativeLayout) rootView.findViewById(R.id.base_fragment_loading_layout);        base_fragment_iv_loading = (ImageView) rootView.findViewById(R.id.base_fragment_iv_loading);        base_fragment_tv_loading = (TextView) rootView.findViewById(R.id.base_fragment_tv_loading);        base_fragment_loading_layout.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                onClickBaseLoading();            }        });        LayoutParams layoutParams = new LayoutParams(LayoutParams.MATCH_PARENT,                LayoutParams.MATCH_PARENT);        View centerView = View.inflate(mContext, setContentView(), null);        subCententView.addView(centerView, layoutParams);        return rootView;    }    private void initXUtils() {        XUtilsManager xUtilsManager = XUtilsManager.getInstance(mContext);        mHttpUtils = xUtilsManager.getHttpUtils();        mBitmapUtils = xUtilsManager.getBitmapUtils();    }    /**     * 显示loading圈     */    protected void showBaseLoading() {        if (!mIsShowAnim) {            return;        }        base_fragment_loading_layout.setVisibility(View.VISIBLE);        base_fragment_loading_layout.setEnabled(false);        startLoadingAnim();    }    /**     * 隐藏loading圈     */    protected void hideBaseLoading() {        base_fragment_loading_layout.setVisibility(View.GONE);        stopLoadingAnim();    }    /**     * 开启加载动画     */    protected void startLoadingAnim() {        base_fragment_iv_loading.setImageResource(R.drawable.anim_loading);        AnimationDrawable animationDrawable = (AnimationDrawable) base_fragment_iv_loading.getDrawable();        animationDrawable.start();        base_fragment_tv_loading.setText("努力加载中...");    }    /**     * 停止加载动画     */    protected void stopLoadingAnim() {        if (base_fragment_iv_loading.getDrawable() instanceof AnimationDrawable) {            AnimationDrawable animationDrawable = (AnimationDrawable) base_fragment_iv_loading.getDrawable();            animationDrawable.stop();        }    }    /**     * 显示加载错误     */    protected void showLoadingError() {        base_fragment_loading_layout.setVisibility(View.VISIBLE);        base_fragment_loading_layout.setEnabled(true);        base_fragment_iv_loading.setImageResource(R.mipmap.progress_error);        base_fragment_tv_loading.setText("亲,加载错误，戳我重新加载!");    }    /**     * 显示网络错误     */    protected void showNetError() {        if (!mIsShowAnim) {            return;        }        base_fragment_loading_layout.setVisibility(View.VISIBLE);        base_fragment_loading_layout.setEnabled(true);        base_fragment_iv_loading.setImageResource(R.mipmap.progress_no_net);        base_fragment_tv_loading.setText("亲,网络不给力哦!");    }    /**     * 设置是否显示加载动画     */    protected void isShowAnim(boolean isShowAnim) {        this.mIsShowAnim = isShowAnim;    }    /**     * GET方式请求服务器     */    protected void initDataByGet(String url) {        initDataByGet(url, null);    }    /**     * GET方式请求服务器     */    protected void initDataByGet(String url, RequestParams requestParams) {        initDataByGet(url, requestParams, null);    }    /**     * POST方式请求服务器     */    protected void initDataByPost(String url, RequestParams requestParams) {        initDataByPost(url, requestParams, null);    }    /**     * GET方式请求服务器,避免用户点击多次按钮,造成重复加载     */    protected void initDataByGet(final String url, RequestParams requestParams, final View view) {        if (!NetUtil.isNetConnect(mContext)) {            ToastUtil.showToast(mContext, "请检查网络");            showNetError();            return;        }        mHandler = mHttpUtils.send(HttpMethod.GET, url, requestParams, new RequestCallBack<String>() {            @Override            public void onStart() {                if (view != null) {                    view.setEnabled(false);                }                initDataOnStart(url);            }            @Override            public void onSuccess(ResponseInfo<String> responseInfo) {                try {                    if (view != null) {                        view.setEnabled(true);                    }                    String responseData = responseInfo.result;                    initDataOnSucess(responseData, url);                } catch (Exception e) {                    e.printStackTrace();                }            }            @Override            public void onFailure(HttpException error, String msg) {                if (view != null) {                    view.setEnabled(true);                }                ToastUtil.showToast(mContext, "获取服务器数据失败");                initDataOnFailure(url);            }        });    }    /**     * POST方式请求服务器,避免用户点击多次按钮,造成重复加载     */    protected void initDataByPost(final String url, RequestParams requestParams, final View view) {        if (!NetUtil.isNetConnect(mContext)) {            ToastUtil.showToast(mContext, "请检查网络");            return;        }        mHandler = mHttpUtils.send(HttpMethod.POST, url, requestParams, new RequestCallBack<String>() {            @Override            public void onStart() {                if (view != null) {                    view.setEnabled(false);                }                initDataOnStart(url);            }            @Override            public void onSuccess(ResponseInfo<String> responseInfo) {                try {                    if (view != null) {                        view.setEnabled(true);                    }                    String responseData = responseInfo.result;                    initDataOnSucess(responseData, url);                } catch (Exception e) {                    e.printStackTrace();                }            }            @Override            public void onFailure(HttpException error, String msg) {                ToastUtil.showToast(mContext, "获取服务器数据失败");                if (view != null) {                    view.setEnabled(true);                }                initDataOnFailure(url);            }        });    }    /**     * 取消请求服务器     */    protected void cancelLoad() {        if (mHandler != null) {            mHandler.cancel();        }    }    /**     * 初始化子类fragment的变量     */    protected abstract void initVariable();    /**     * 加载子类布局     */    protected abstract int setContentView();    /**     * 加载控件     */    protected abstract void findViews(View rootView);    /**     * 设置监听     */    protected abstract void setListensers();    /**     * 请求网络之前     */    protected void initDataOnStart(String url) {    }    /**     * 请求网络成功     */    protected void initDataOnSucess(String result, String url) {    }    /**     * 请求网络失败     */    protected void initDataOnFailure(String url) {    }    /**     * 请求网络失败     */    protected void onClickBaseLoading() {    }}